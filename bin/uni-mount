#!/usr/bin/env python3

'''
{
	"type": "cifs|...",
	"user": "",
	"pass": "",
	"systemUser": "",
	"server": "ip address/hostname",
	"serverDir": "server path",
	"localDir": "Full path",
	"uid": "$UID",
	"gid": "$GID"
}
'''

import json
import argparse
import subprocess
import os
import glob
import re
import sys

def is_mounted(localDir):
	return os.path.ismount(localDir)

def mount(mountType, user, password, localDir, serverPath, uid, gid):
	if mountType == 'cifs':
		if not os.path.exists(localDir):
			os.makedirs(localDir)
		option = "user=%s,pass=%s,uid=%s,gid=%s" % (user,password,uid,gid)
		status = subprocess.call(["mount", "-t", "cifs", "-o", option, serverPath, localDir])
		if status == 0:
			print(localDir + " mounted")
		else:
			print(localDir + " mounting failed")
			clean(localDir)
	elif data['type'] == 'somethingelse':
		print('somethingelse')
	else:
		print('No type defined.')

def umount(localDir):
	status = subprocess.call(["umount", "-l", localDir])
	if status == 0:
		print(localDir + " unmounted")
		clean(localDir)

def clean(localDir):
	os.rmdir(localDir)

def getConfigFile(mypath):
	configFiles = glob.glob(mypath+"/*.conf")

	# Exit program if config file not found
	if not configFiles:
		print('Config files not fount in the location')
		sys.exit(1)

	for index, configFile in enumerate(configFiles):
		print("%s. %s" % (index, re.search(r"\/(\w+).conf$", configFile).group(1)))
	
	try:
		fileIndex = int(input('\n\nSelect the config to mount: '))
		return configFiles[fileIndex]
	except IndexError:
		print("\n\n>>> Invalid Input\n\n")
		return getConfigFile(mypath)


parser = argparse.ArgumentParser(prog='Unified Mount', description='Unified command line mount interface')
parser.add_argument('-p', '--path', help='Config file/dir path', required=True)
config = parser.parse_args()

try:
	file = config.path

	# If the path is a directory, list all *.conf file and let user select
	if os.path.isdir(file) is True:
		file = getConfigFile(file)

	data = json.load(open(file))

	mountType = data.get('type')

	user = data.get('user')
	password = data.get('pass')
	if password is None:
		password = input('Please enter server password: ')

	localDir = data.get('localDir')
	server = data.get('server')
	serverDir = data.get('serverDir')
	serverPath = '//' + server + '/' + serverDir

	uid = data.get('uid')
	gid = data.get('gid')

	#Trying to figureout 'uid' and 'gid'
	if uid is None or gid is None:
		# Trying to get 'systemUser', if not use 'user'
		from pwd import getpwnam
		systemUser = data.get('systemUser')
		if systemUser is None:
			systemUser = data.get('user')
		userDetails = getpwnam(systemUser)
		uid = userDetails.pw_uid
		gid = userDetails.pw_gid

	# If the config is aleady mounted, unmount it
	if is_mounted(localDir):
		umount(localDir)
	else:
		mount(mountType, user, password, localDir, serverPath, uid, gid)

except Exception as e:
	print(str(e))
