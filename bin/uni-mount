#!/usr/bin/env python3

# Require mount.cifs and sshfs

'''
{
	"type": "cifs|ssh",
	"user": "",
	"pass": "",
	"systemUser": "",
	"server": "ip address/hostname",
	"port": "22",
	"serverDir": "server path",
	"localDir": "Full path",
	"uid": "$UID",
	"gid": "$GID"
}
'''

import json
import argparse
import subprocess
import os
import glob
import re
import sys



def getConfigFile(mypath):
	configFiles = glob.glob(mypath+"/*.conf")

	# Exit program if config file not found
	if not configFiles:
		print('Config files not fount in the location')
		sys.exit(1)

	for index, configFile in enumerate(configFiles):
		server_name = re.search(r"\/([\w-]+).conf$", configFile).group(1);
		if is_mounted(json.load(open(configFile))):
			print("{}. {} (*)".format(
				index,
				server_name
			))
		else:
			print("{}. {}".format(
				index,
				server_name
			))

	try:
		fileIndex = int(input('\n\nSelect the config to mount: '))
		return configFiles[fileIndex]
	except (ValueError,IndexError):
		print("\n\n>>> Invalid Input\n\n")
		return getConfigFile(mypath)


def mount(o_config):

	mountType = o_config.get('type')
	user = o_config.get('user')
	password = o_config.get('pass')
	localDir = o_config.get('localDir')
	server = o_config.get('server')
	port = o_config.get('port')
	if port is None:
		port = "22"
	serverDir = o_config.get('serverDir')
	uid = o_config.get('uid')
	gid = o_config.get('gid')

	# If the localDir exists, we try to unmount
	# Need to check isfile as well, because the mounted folder is treated as file in some weird cases.
	if os.path.exists(localDir) or os.path.isfile(localDir):
		umount(o_config)

	#Create directory is it doesn't exists
	if not os.path.exists(localDir):
		os.makedirs(localDir)

	if mountType == 'cifs':
		option = "user=%s,pass=%s,uid=%s,gid=%s,vers=1.0" % (user,password,uid,gid)
		serverPath = '//' + server + '/' + serverDir
		status = subprocess.call(["mount", "-t", "cifs", "-o", option, serverPath, localDir])
	elif mountType == 'ssh':
		option = "%s@%s:/%s" % (user, server, serverDir)
		status = subprocess.call(["sshfs", option, localDir, "-p", port, "-o", "idmap=user,reconnect"])
	else:
		print('No type defined.')

	handle_mount_status(o_config, status)


def umount(o_config):
	localDir = o_config.get('localDir')
	status = subprocess.call(["umount", "-l", localDir])
	if status == 0:
		print(localDir + " unmounted")
		clean(o_config)


def handle_mount_status(o_config, status):
	if status == 0:
		print(o_config['localDir'] + " mounted")
	else:
		print(o_config['localDir'] + " mounting failed")
		clean(o_config)


def is_mounted(o_config):
	return os.path.ismount(o_config.get('localDir'))


def clean(o_config):
	os.rmdir(o_config.get('localDir'))


parser = argparse.ArgumentParser(prog='Unified Mount', description='Unified command line mount interface')
parser.add_argument('-p', '--path', help='Config file/dir path')
parser.add_argument('-m', '--mount', help='Disable mount toggle and force to mount.', action='store_true')
parser.add_argument('-u', '--umount', help='Disable mount toggle and force to unmount.', action='store_true')
config = parser.parse_args()

try:
	file = config.path

	# If the path is a directory, list all *.conf file and let user select
	if os.path.isdir(file) is True:
		file = getConfigFile(file)

	o_config = json.load(open(file))

	# Ask for password if it is not set
	if o_config.get('pass') is None and o_config.get('type') != 'ssh':
		o_config['pass'] = input('Please enter server password: ')

	#Trying to figureout 'uid' and 'gid'
	if o_config.get('uid') is None or o_config.get('gid') is None:
		# Trying to get 'systemUser', if not use 'user'
		from pwd import getpwnam
		if o_config.get('systemUser') is None:
			o_config['systemUser'] = o_config['user']
		userDetails = getpwnam(o_config['systemUser'])
		o_config['uid'] = userDetails.pw_uid
		o_config['gid'] = userDetails.pw_gid

	# If the config is aleady mounted, unmount it
	if is_mounted(o_config):
		if not config.mount is True:
			umount(o_config)
	else:
		if not config.umount is True:
			mount(o_config)

except Exception as e:
	print(str(e))
